View(quakes)
cloud(depth~lat*long, data = quakes, zlim = rev(range(quakes)), xlab = 'lat', ylab = 'long')
library(lattice)
cloud(depth~lat*long, data = quakes, zlim = rev(range(quakes)), xlab = 'lat', ylab = 'long')
cloud(depth~lat*long, data = quakes, zlim = rev(range(quakes$depth)), xlab = 'lat', ylab = 'long')
cloud(depth~lat*long, data = quakes, zlim = rev(range(quakes$depth)), xlab = 'lat', ylab = 'long', screen = list(z=45, x = -25))
cloud(depth~lat*long, data = quakes, zlim = rev(range(quakes$depth)), xlab = 'lat', ylab = 'long', screen = list(z=20, x = -25))
cloud(depth~lat*long, data = quakes, zlim = rev(range(quakes$depth)), xlab = 'lat', ylab = 'long', screen = list(z=10, x = -25))
cloud(depth~lat*long, data = quakes, zlim = rev(range(quakes$depth)), xlab = 'lat', ylab = 'long', screen = list(z=0, x = -25))
setwd('c:/Rwork/Part-II')
setwd('c:/Rwork/Part-I')
studentx<- read.csv()
studentx<- read.csv('studentx.csv', header = T)
studentx<- read.xlsx('studentx.xlsx', header = T)
studentx<- read.csv('studentx.xlsx', header = T)
View(studentx)
install.packages(xlsx, dep = T)
install.packages(xlsx'')
install.packages('xlsx')
library(xlsx)
studentx<- read.xlsx('studentx.xlsx', header = T)
studentx<- read.xlsx('studentx.xlsx', sheetIndex = 1)
studentx<- read.xlsx('studentx.xlsx', sheetIndex = 1, encoding="UTF-8")
cloud(평가~학번+이름, data =studentx)
library(ddplyr)
library(ddply)
aaply(iris$Sepal.Length, iris$Species, mena)
aaply(iris$Sepal.Length, iris$Species, mean)
apply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
aaply(iris, mean)
apply(iris, mean)
ddply(iris, .(Species), summarise, avg = mean(Sepal.Length))
library(ddply)
ddply(iris, .(Species), summarise, avg = mean(Sepal.Length))
ddply(iris, .(Species), summarise, avg = mean(Sepal.Length))
library(dplyr)
ddply(iris, .(Species), summarise, avg = mean(Sepal.Length))
library(plyr)
ddply(iris, .(Species), summarise, avg = mean(Sepal.Length))
library(hflights)
hflights_df<- tbl_df(hflights)
hflight
hflights
head(hflights)
head(hflights_df)
filter(hflights_df, month ==1, DayofMonth ==2)
filter(hflights_df, Month ==1, DayofMonth ==2)
filter(hflights_df, Month ==1& DayofMonth ==2)
filter(hflights_df, Month ==1 | DayofMonth ==2)
arrange(hflights_df, desc(Month))
arrange(hflights_df, (Month))
install.packages('ggplot2')
library(ggplot2)
ggplot2
data(diamonds)
data(mtcars)
data(mpg)
str(mpg)
table(mpg$drv)
mutate(hglights_df, gain = ArrDelay - DepDelay)
mutate(hflights_df, gain = ArrDelay - DepDelay)
select(hflights_df, ArrDelay, DepDelay, gain)
select(hflights_df, ArrDelay, DepDelay, Cancelled)
select(hflights_df, ArrDelay, DepDelay, mutate(hflights_df, gain  = ArrDelay- DepDelay))
select( mutate(hflights_df, gain  = ArrDelay- DepDelay))
select( mutate(hflights_df, gain  = ArrDelay- DepDelay), DepDelay)
qplot(hwy, data = mpg)
select( mutate(hflights_df, gain  = ArrDelay- DepDelay) )
call<- mutate(hflights_df, gain  = ArrDelay- DepDelay)
call
select ( call, gain)
select(mutate(hflights_df, get = ArrDelay- DepDelay))
select(mutate(hflights_df, get = ArrDelay- DepDelay), ArrDelay)
View(hflights_df)
str(hflights_df)
gplot(hwy, data = mpg, fill=drv)
qplot(hwy, data = mpg, fill=drv)
qplot(hwy, data = mpg, fill)
qplot(hwy, data = mpg, fill=all)
qplot(hwy, data = mpg, fill=full)
qplot(hwy, data = mpg)
str_extract_all('123456-1234567', '[0-9]{6}-[1234][0-9]{6}')
str_extract_all('123456-1234567', '[0-9]{6}-[1234][0-9]{6}')
library(stringr)
str_extract_all('123456-1234567', '[0-9]{6}-[1234][0-9]{6}')
str_extract_all('123456-1234567', '[0-9]{6}-[1234][0-9]{5}')
str_extract_all('123456-1234567', '[0-9]{6}-[1234][0-9]{7}')
str_extract_all('123456-1234567', '[0-9]{6}-[1234][0-9]{6}')
str_extract_all('123456-1234567', '[0-9]{6}-')
str_extract_all('123456-1234567', '\\d{6}-\\d{6}')
str_extract_all('123456-1234567', '[0-9]{6}-[1234][0-9]{6}')
str_extract_all('123456-1234567', '[0-9]{6}-[0-9]{6}')
str_extract_all('123456-1234567', '[0-9]{6}-[3456][0-9]{6}')
str_extract_all('123456-1234567', '[0-9]{6}-[0-9]{6}')
library(ggplot2)
str(mtcars)
View(mtcars)
mtcars
mtcars01 <- tbl_df(mtcars)
mtcars01
help(qqplot)
species<- group_by(iris, Species)
View(species)
planes<- group_by(hflights_df, TailNum)
planesInfo <- summarise(planes, count = n(), dist = mean(Distance, na.rm = T), delay =mean(ArrDelay, na.rm = T))
library(dplyr)
planesInfo <- summarise(planes, count = n(), dist = mean(Distance, na.rm = T), delay =mean(ArrDelay, na.rm = T))
studentx
studentx$국어<- c(60, 73, 50,90,84)
studentx$수학<- c(38, 95, 72,96, 49)
studentx$영어<- c(90, 48, 58,88, 84)
qplot(국어, 영어, data = studentx, size = factor(국어+수학+영어), color =factor(학년), shape = factor(반) )
qplot(국어, 영어, data = studentx, size = factor(국어+수학+영어), color =factor(학번), shape = factor(반) )
qplot(국어, 영어, data = studentx, size = factor(국어+수학+영어), color =factor(str_sub(학번, 1,1)), shape = factor(str_sub(학번, 3,1)) )
(str_sub(학번, 1,1))
(str_sub(studentx$학번, 1,1))
(str_sub(studentx$학번, 3,1))
(str_sub(studentx$학번, 2,1))
(str_sub(studentx$학번, 1,1))
(str_sub(studentx$학번, 3,1))
(str_sub(studentx$학번, 3,3))
factor(str_sub(studentx$학번, 1,1))
studentx$학년 <- (str_sub(studentx$학번, 1,1))
studentx$반 <- (str_sub(studentx$학번, 3,3))
View(studentx)
planesInfo <- summarise(planes, count = n(), dist = mean(Distance, na.rm = T))
planesInfo <- summarise(planes, count = n(), dist = mean(Distance, na.rm = T))
planes <- group_by(hflights_df, TailNum)
planes
planesInfo <- summarise (planes, count = n(), dist= mean(Distance, na.rm = T))
qplot(국어,영어, data = studentx, size = factor(학년))
qplot(국어,영어, data = studentx, size = factor(학년), color = factor(반), shape = factor(성적))
qplot(국어,영어, data = studentx, fill = cut, size = factor(학년), color = factor(반), shape = factor(성적))
qplot(국어,영어, data = studentx, clarity, fill = cut, size = factor(학년), color = factor(반), shape = factor(성적))
qplot(국어,영어, data = studentx, fill=cut, geom = 'bar')
qplot(clarity, data = diamonds, fill = cut, geom = 'bar')
qplot(clarity, data = diamonds, fill =  full, geom = 'bar')
qplot(clarity, data = diamonds, color = cut, geom = 'bar')
qplot(clarity, data = diamonds, color = cut, geom = 'bar', size = factor(반), col = factor(학년), shape = factor(수학))
qplot(clarity, data = diamonds, geom = 'bar', size = factor(반), col = factor(학년), shape = factor(수학))
qplot(clarity, data = diamonds, geom = 'bar')
str(diamonds)
qplot(clarity, data = diamonds, geom = 'bar', size = factor(price), shape = factor(depth), col = factor(clarity))
ggplot(diamonds, aes(price))
p<- ggplot(diamonds, aes(price))
p+ stat_bin(aes(fill = cut), geom = 'area')
p+ stat_bin(aes(color = cut, size = ..density..), geom = 'area')
p+ stat_bin(aes(color = cut, size = factor(density)), geom = 'area')
p+ stat_bin(aes(color = cut, size = density), geom = 'area')
p<- ggplot(diamonds, aes(fill = cut, size = price), geom = 'area')
p
p<- ggplot(diamonds, aes(fill = cut, size = density), geom = 'area')
p
p<- ggplot(diamonds, aes(carat, price, color = cut)
)
p<- ggplot(diamonds, aes(carat, price, color = cut))
p
p + geom_point()
library(ggplot2)
install.packages(ggmap)
install.packages('ggmap')
library(ggmap)
get_googlemap()
gc<- geocode('seoul, korea', source = 'korea')
gc<- geocode('seoul, korea', source = 'google')
center<- as.numeric(gc)
center
x+y
x<-1
y<-2
x+y
x<-1
y<-2
x+y
summarise(hflights_df, avgAirTime = mean(AirTime, na.rm = T))
select(mutate(hflights_df, gain = ArrDelay - DepDelay, gain_per_hour = gain/(AirTime/60)), Year, month.abb)
select(mutate(hflights_df, gain = ArrDelay - DepDelay, gain_per_hour = gain/(AirTime/60)), Year, Month)
y<- select(mutate(hflights_df, gain = ArrDelay - DepDelay, gain_per_hour = gain/(AirTime/60)), Year, Month)
y
z<- mutate(hflights_df, gain = ArrDelay - DepDelay, gain_per_hour = gain/(AirTime/60)), Year, Month)
z
z<- mutate(hflights_df, gain = ArrDelay - DepDelay, gain_per_hour = gain/(AirTime/60)), Year, Month)
map <- get_googlemap(center = center, language = 'ko-KR', encoding = 'utf-8')
z<- mutate(hflights_df, gain = ArrDelay - DepDelay, gain_per_hour = gain/(AirTime/60)), Year, Month)
z<- mutate(hflights_df, gain = ArrDelay - DepDelay, gain_per_hour = gain/(AirTime/60))
z
z
z['gain']
z['Year', 'Month', 'gain']
z['Year', 'Month']
z['Year']
z['gain']
z['Year','gain']
library(reshape)
library(reshape2)
getwd()
setwd('c:/Rwork/Part-II')
result <- read.csv('reshape.csv', header = T)
head(result)
names(result)<- c('total', 'num1','num2','num3')
result<- rename(result, c('total', 'num1','num2','num3') )
result
head(result)
wide<- reshape(Idometh, vnames = 'conc', timevar = 'time',idvar = 'Subject', direction = 'wide')
wide<- reshape(Idometh, v.names = 'conc', timevar = 'time',idvar = 'Subject', direction = 'wide')
Indometh
wide<- reshape(Indometh, v.names = 'conc', timevar = 'time',idvar = 'Subject', direction = 'wide')
wide
long<- reshape(wide, v.names = 'conc', idvar = 'Subject', varing = 2:12, direction = 'long')
long<- reshape(wide, v.names = 'conc', idvar = 'Subject', varying = 2:12, direction = 'long')
long
melt(smiths, id = c('Subject', 'time'))
melt(smiths, id = c('subject', 'time'))
melt(smiths, id = c('subject', 'time'), measured = c('age', 'weight', 'height'))
melt(smiths, id = c('subject', 'time'))
melt(smiths, id = c('subject', 'time'), measured = c('age', 'weight', 'height'))
melt(smits, id = 1:2, na.rm = T)
melt(smiths, id = 1:2, na.rm = T)
smithsm<- melt(smiths, id = 1:2)
cast(smithsm, subject + time~ variable)
cast(smithsm, subject + time~ variable)
cast(smithsm, subject + time~ variable)
help(cast)
library(reshape2)
cast(smithsm, subject + time~ variable)
cast(smithsm, ...~ variable)
cast(smithsm, subject + time~ variable)
smithsm
cast(smithsm, subject + time~ variable)
cast(smithsm, subject + time ~ variable)
cast(smithsm, subject + time ~ variable)
cast(long,Subject ~ variable, sum)
install.packages("reshape")
library(reshape)
cast(long,Subject ~ variable, sum)
cast(smithsm, subject + time ~ variable)
cast(long,Subject ~ variable, sum)
long
head(long)
cast(long,Subject ~ conc, sum)
long<- melt(Indometh, id = c('Subject', 'time))
cast(long,Subject ~ variable, sum)
install.packages("reshape")
long<- melt(Indometh, id = c('Subject', 'time'))
cast(long,Subject ~ variable, sum)
head(long)
Indometh
cast(long,Subject ~ conc, sum)
cast(smithsm, ... ~ variable)
cast(long,...~ variable, sum)
smithsm
head(long)
cast(long , ...~ time, sum)
cast(long , ...~ Subject, sum)
library(reshape2)
data<- read.csv('data.csv')
wide<- dcast(data, Customer_ID~ Date, sum)
wide
head(data)
wide
getwd()
write.csv(wide, 'wide.csv', row.names = F)
wider<- read.csv('wide.csv', header = T)
wider
names(wider)<- c('Customer_ID','day1','day2','day3','day4','day5','day6','day7')
wider
melt(wider, id = 'Customer_ID')
long<- melt(wider, id = 'Customer_ID')
head(long)
name<- c('Customer_ID', 'Date', 'Buy')
colnames(long) <- c('Customer_ID', 'Date', 'Buy')
long
head(long)
source('C:/Rwork/Part-II/Intro0713_Rstudio.R')
install.packages("reshape")
data("airquality")
str(airquality)
names(airquality) <- toupper(names(airquality))
head(airquality)
air_melt <- melt(airquality, id = c('Month', 'Day'), na.rm = T)
library(reshape2)
air_melt <- melt(airquality, id = c('Month', 'Day'), na.rm = T)
air_melt <- melt(airquality, id = c('MONTH', 'DAY'), na.rm = T)
head(air_melt)
names(air_melt) <- tolower(names(air_melt))
acast <- acast(air_melt, day~month~ variable)
acast <- acast(air_melt, day~month~ variable) # 3차원 형
acast
class(acast)
acast(air_melt, month~variable, sum, margins = T)
data(mtcarts)
data(mtcars)
head(mtcars)
library(plyr)
mtcarCyl <- group_by(mtcars, cyl)
library(dplyr)
mtcarCyl <- group_by(mtcars, cyl)
gCyl <- group_by(mtcars, cyl)#dplyr
summarise(gCyl, meanCyl = mean(gCyl, na.rm = T ))
meanCyl <- summarise(gCyl, meanCyl = mean(gCyl, na.rm = T ))
meanCyl
meanCyl <- summarise(gCyl, meanCyl = mean(mtcars, na.rm = T ))
meanCyl
meanCyl <- summarise(mtcars, meanCyl = mean(gCyl, na.rm = T ))
meanCyl
summarise(hgflights_df, delay = mean(AirTime, na.rm = T))
hflights_df
summarise(hflights_df, delay = mean(AirTime, na.rm = T))
gCyl <- group_by(tbl_df(mtcars), cyl)#dplyr
meanCyl <- summarise(gCyl, meanCyl = mean(gCyl, na.rm = T ))
meanCyl
tbl_df(mtcars)
group_by(tbl_df(mtcars), cyl)
gCyl <- group_by(tbl_df(mtcars), cyl)#dplyr
gCyl
meanCyl
meanCyl <- summarise(gCyl, meanCyl = mean(gCyl, na.rm = T ))
meanCyl
